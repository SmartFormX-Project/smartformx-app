generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  email                String   @unique
  provider             String
  country              String
  password             String?
  createdAt            DateTime @default(now())
  updateAt             DateTime @updatedAt
  businessId           String   @unique @db.Uuid
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique
  tempToken            String?
  verifiedEmail        Boolean  @default(false)
  metadata             Json?
  paymentIntentStatus  String?
  subscribeStatus      String   @default("unfinished")

  Reports  Reports[]
  Business Business  @relation(fields: [businessId], references: [id])
}

model Business {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String
  category    String
  clients     String
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  Forms Form[]
  User  User?
}

model Form {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category       String
  status         String   @default("in_progress")
  businessId     String   @db.Uuid
  createdAt      DateTime @default(now())
  updateAt       DateTime @updatedAt
  description    String?
  title          String
  entrances      Int      @default(0)
  shortId        String   @unique
  limitAns       Int      @default(45)
  extraEntrances Int      @default(0)

  Analyse     Analyse?
  Business    Business      @relation(fields: [businessId], references: [id])
  Questions   Questions[]
  UserAnswers UserAnswers[]
}

model Questions {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question  String
  formId    String   @db.Uuid
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  options   String[] @default([])
  goal      String
  inputType String

  Answers Answers[]
  Form    Form      @relation(fields: [formId], references: [id])
}

model UserAnswers {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  referenceCode String   @unique
  formId        String   @db.Uuid
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt

  Answers Answers[]
  Form    Form      @relation(fields: [formId], references: [id])
}

model Answers {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questionId    String   @db.Uuid
  userAwnsearId String   @db.Uuid
  answear       String
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt

  Question   Questions   @relation(fields: [questionId], references: [id])
  UserAnswer UserAnswers @relation(fields: [userAwnsearId], references: [id])
}

model Analyse {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  formId    String   @unique @db.Uuid
  summary   String
  usage     Json
  keywords  String[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  Form   Form            @relation(fields: [formId], references: [id])
  Stats  Stats[]
  Topics TopicAnalyses[]
}

model Stats {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  info      String
  value     String
  analyseId String?  @db.Uuid
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  Analyse Analyse? @relation(fields: [analyseId], references: [id])
}

model TopicAnalyses {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  type         String
  description  String
  howToImprove String?
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
  analyseId    String?  @db.Uuid

  Analyse Analyse? @relation(fields: [analyseId], references: [id])
}

model Reports {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  category    String
  description String
  media       String?
  userId      String   @db.Uuid
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}
